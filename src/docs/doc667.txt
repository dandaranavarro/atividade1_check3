   imagem kernel layout svg thumb 200px um núcleo de sistema conecta o software aplicativo ao hardware de um computador   em   computação    o    núcleo    ou    cerne       é o componente central do   sistema operativo   da maioria dos computadores  ele serve de ponte entre aplicativos e o processamento real de dados feito a nível de hardware  as responsabilidades do núcleo incluem gerenciar os recursos do sistema  a comunicação entre componentes de   hardware   e   software     ref name  wulf74    geralmente como um componente básico do sistema operativo  um núcleo pode oferecer a   camada de abstração   de nível mais baixo para os recursos  especialmente   unidade central de processamento processadores   e dispositivos de   entrada saída    que softwares aplicativos devem controlar para realizar sua função  ele tipicamente torna estas facilidades disponíveis para os   processo  informática  processos   de   aplicativos   através de mecanismos de   comunicação entre processos   e   chamada de sistema chamadas de sistema   tarefas de sistemas operativos são feitas de maneiras diferentes por núcleos diferentes  dependendo do seu desenho e abordagem  enquanto   núcleo monolítico núcleos monolíticos   tentam alcançar seus objetivos executando todos códigos de sistema no mesmo   espaço de endereçamento   para aumentar a performance do sistema    micronúcleo  informática  micronúcleos   executam a maioria dos serviços do sistema no   espaço de usuário   como   servidores    buscando melhorar a manutenção e a modularidade do sistema operativo    visão geral     imagem computer abstraction layers svg thumb 200px uma visão típica de uma   arquitetura de computadores   como séries de camadas de abstração    hardware      firmware      linguagem de montagem montador    núcleo    sistema operativo   e   processo  informática  aplicativos    veja também  http   www pearsonhighered com educator academic product 0  0131485210 00 2ben-uss 01dbc html   organização estruturada de computadores    por andrew s  tanenbaum      na definição do  núcleo     jochen liedtke   disse que a palavra é  tradicionalmente usada para definir a parte do sistema operativo que é obrigatória e comum a todo software no sistema   ref name  liedtke95  liedtke 95  ref a maioria dos sistemas operativos depende do conceito de    núcleo     a existência de um núcleo é uma consequência natural de projetar um sistema de computador como séries de   camada de abstração camadas de abstração    ref name  tanenbaum79  tanenbaum 79  chapter 1  ref  cada uma das funções dependendo das funções das camadas abaixo de si  o núcleo deste ponto de vista  é simplesmente o nome dado ao nível mais inferior de abstração que é implementado em   software    para evitar ter um núcleo  teria-se que projetar todo o software no sistema de modo a não utilizar abstração alguma  isto iria aumentar a complexidade e o projeto a tal ponto que apenas os sistemas mais simples seriam capazes de ser implementados enquanto isto hoje é chamado   núcleo    originalmente a mesma parte do sistema também foi chamado o      nucleus      ou      caroço      ref name  wulf74  wulf 74 pp 337-345  ref  ref name  deitel82  deitel 82  p 65-66 cap  3 9  ref  ref name  kernelnames  lorin 81 pp 161-186  schroeder 77  shaw 75 pp 245-267  ref  ref name  hansen70  brinch hansen 70 pp 238-241  ref   nota  no entanto  este termo   caroço   também foi usado para se referir a memória primordial de um sistema de computador  por que alguns dos primeiros computadores usaram uma forma de memória chamada   memória de caroços magnéticos     e foi concebido originalmente como contendo apenas os recursos de suporte essenciais do sistema operativo na grande maioria dos casos  o   processo de iniciação   começa executando o núcleo no modo supervisor  ref name  supervisor  o nível de privilégio mais alto possui vários nomes pelas diferentes arquiteturas  tais como modo supervisor  modo núcleo  cpl0  dpl0  anel 0  etc  veja  anel  segurança   para mais informações   ref  o núcleo depois inicializa a si e depois o primeiro processo  depois disto  tipicamente  o núcleo não executa diretamente  apenas em resposta para eventos externos    ex     através de chamadas de sistema usados pelos aplicativos para requisitar serviços do núcleo  ou via   interrupção de hardware interrupções   usadas pelo hardware para notificar o núcleo sobre eventos   além disso  tipicamente o núcleo fornece um laço que é executado sempre que nenhum processo esta disponível para execução  geralmente chamado de   processo desocupado   o desenvolvimento do núcleo é considerado uma das mais complexas e difíceis tarefas em programação  ref name  bkerndev    ref  sua posição central em um sistema operativo implica a necessidade de bom desempenho  que define o núcleo como peça de software crítica e torna seu desenvolvimento correto e implementação correta difícil  devido a diversas razões  o núcleo pode até não ser capaz de utilizar mecanismos de   abstração  programação  abstração    que ele fornece a outro software  tais razões incluem preocupações com o   gerenciamento de memória    ex  uma função em modo de usuário pode depender de memória estando sujeita a   paginação por demanda    mas como o próprio núcleo fornece esta facilidade  ele não pode utilizá-la  pois ele pode não permanecer na memória para fornecer esta facilidade  e a falta de   reentrância    logo o seu desenvolvimento torna-se ainda mais difícil para engenheiros de software geralmente um núcleo vai fornecer recursos para   escalonamento de processos   de baixo nível  ref name  deitel82sched  para escalonamento de processos de baixo nível veja deitel 82  ch  10  pp  249 268   ref    comunicação entre processos      sincronização   de processos    troca de contexto    manipulação de   bloco de controle de processo blocos de controle de processo    gerenciamento de   interrupção de hardware interrupções    criação e destruição de processos  e suspensão e continuação de processos  veja   estados de processos     ref name  deitel82     ref name  hansen70       finalidades básicas do núcleo   o principal propósito do núcleo é gerenciar os recursos do computador e permitir que outros programas rodem e usem destes recursos  ref name  wulf74    tipicamente estes recursos consistem de   a   unidade de processamento central    cpu  o processador   esta é a parte mais central de um sistema de computação  responsável por   rodar   ou   executar   programas nele  o núcleo tem a responsabilidade de decidir  em qualquer momento  qual dos programas em execução deve ser alocado para o processador ou processadores  cada um dos quais geralmente pode executar um programa por vez   a   memória de acesso aleatório memória    a memória é usada para armazenar ambos instruções do programa e dados  tipicamente  ambos precisam estar presentes na memória de modo a tornar a execução do programa possível  frequentemente múltiplos programas buscarão acesso à memória ao mesmo tempo  na maioria das vezes exigindo mais memória do que o computador pode disponibilizar  o núcleo é responsável pela decisão de que memória cada processo pode utilizar  e determinar o que fazer quando menos do suficiente está disponível   qualquer dispositivo de   entrada saída   presente no computador  tais como teclado  mouse  entradas de disquete  impressoras  telas  etc  o núcleo aloca pedidos de aplicativos para realizar entrada saída para um dispositivo apropriado  ou subseção de um dispositivo  no caso de arquivos em um disco ou janelas em uma tela  e fornece métodos convenientes para o uso do dispositivo  tipicamente abstraído ao ponto onde o aplicativo não precisa mais conhecer os detalhes da implementação do dispositivo  aspectos importantes no gerenciamento de recursos são a definição de um domínio de execução    espaço de endereçamento    e o mecanismo de proteção utilizado para mediar o acesso a recursos dentro de um domínio  ref name  wulf74    núcleos geralmente não oferecem métodos para   sincronização   e   comunicação entre processos    ipc   um núcleo pode implementar estes recursos ele mesmo  ou depender de alguns processos que ele executa para fornecer estas facilidades a outros processos  no entanto neste caso ele deve oferecer algum modo do ipc permitir que processos acessem as facilidades fornecidas um pelo outro finalmente  um núcleo deve oferecer um método de acesso a estas facilidades para os programas em execução     gerenciamento de processos    a principal tarefa de um núcleo é permitir a execução de aplicativos e ajudá-los com recursos como abstrações de hardware  um processo define que porções da memória o aplicativo pode acessar  ref name  levy84  levy 1984  p 5  ref   para esta introdução  processo  aplicativo e programa são usados como sinônimos    -- uma definição introdutória clara de processo está faltando --   o   gerenciamento de processos   do núcleo deve levar em conta o equipamento de hardware embarcado para   proteção de memória    ref needham  r m   wilkes  m  v     http   comjnl oxfordjournals org cgi content abstract 17 2 117 domínio de proteção e gerenciamento de processos     computer journal  vol  17  no  2 de maio de 1974  pp 117-120   ref para rodar um aplicativo  um núcleo geralmente cria um   espaço de endereçamento   para o aplicativo  carrega o arquivo contendo de instruções do programa na memória  talvez via   paginação por demanda     cria uma   pilha de chamada pilha   para o programa e ramos para uma dada localização dentro do programa  iniciando  portanto a sua execução  ref name  os-concepts  silberschatz 1990  ref núcleos   multitarefa   são capazes de dar ao usuário a ilusão de que um número de processos que esta rodando simultaneamente no sistema é maior do que o número de processos que aquele sistema é fisicamente capaz de rodar simultaneamente  usualmente  o número de processos que um sistema pode rodar simultaneamente é igual o número de cpus que ele possui instaladas  no entanto  isto pode não ser o caso de processadores que suportam   múltiplas linhas de execução simultâneas    em um sistema multitarefas   preemptividade preemptivo    o núcleo dará a todos programas uma parcela do tempo e vai alternar de processo a processo tão rapidamente que dará ao usuário a impressão de como se os processos estivessem sendo executados simultaneamente  o núcleo utiliza   algoritmo de escalonamento algoritmos de escalonamento   para determinar qual processo será executado a seguir e quanto tempo lhe será dado  o algoritmo escolhido pode permitir que alguns processos tenham uma prioridade mais alta que muitos outros  o núcleo geralmente também provê a esses processos uma maneira de comunicarem-se  isto é chamado   comunicação entre processos    ipc   e as principais implementações são   memória compartilhada      troca de mensagem troca de mensagens   e   chamada de procedimento remoto chamadas de procedimento remoto    veja   computação concorrente    outros sistemas  particularmente em computadores menores  menos potentes  podem fornecer   multitarefa multitarefa de cooperação multitarefa de cooperação    em que cada processo é permitido rodar sem ininterruptamente até que ele faça uma requisição especial que avisa ao núcleo que ele pode alternar para outro processo  tais requisições são conhecidos como  indulgências   yielding  e tipicamente ocorrem em resposta a um pedido para comunicação entre processos  ou para esperar até o acontecimento de um evento  versões mais antigas de ambos   microsoft windows   e   mac os   utilizaram o conceito de multitarefa cooperativa  mas alternaram para esquemas preemptivos conforme a potência dos computadores alvo de seu mercado aumentava o sistema operativo pode também suportar o   multiprocessamento      multiprocessamento simétrico    smp    ou    acesso não-uniforme a memória     neste caso  diferentes programas e linhas de execução podem rodar em diferentes processadores  um núcleo para tal sistema deve ser projetado para ser reentrante  o que significa que ele pode rodar seguramente duas partes de seu código simultaneamente  isto tipicamente significa oferecer mecanismos de   sincronização    como   trava-giro  s  para assegurar que dois processadores não tentarão modificar os mesmos dados ao mesmo tempo     gerenciamento de memória    o núcleo possui acesso completo a memória do sistema e deve permitir que processos acessem a memória com segurança conforme a sua necessidade  frequentemente o primeiro passo para isso é o   endereçamento virtual    geralmente alcançado através da   paginação   e ou   segmentação de memória segmentação    endereçamento virtual permite ao núcleo fazer com que um dado endereço físico pareça ser outro endereço  o endereço virtual  espaços de endereço virtual podem ser diferentes para diferentes processos  a memória que um processos acessa em um endereço  virtual  particular pode ser diferente da que um outro processo acessa pelo mesmo endereço  isto permite a todos programas funcionar como se ele fosse o único em execução  além do núcleo  e por isso evita que aplicativos travem uns aos outros  ref name  os-concepts   em vários sistemas  o endereço virtual de um programa pode se referir a dados que não estão na memória atualmente  a cama de indireção oferecida pelo endereçamento virtual permite que o sistema utilize meios de armazenagem de dados  como um   disco rígido    para armazenar o que de outro modo teria que permanecer na memória  ram   como resultado  sistemas operativos podem permitir que programas usem mais memória do que está fisicamente disponível  quando um programa precisa de dados que não estão na ram  a cpu avisa o núcleo que isto ocorre  e o núcleo responde escrevendo o conteúdo de um bloco de memória inativo para o disco  se necessário   e substituindo-o na memória com os dados requisitados pelo programa  o programa pode então continuar sua execução do ponto em que foi suspenso  este esquema é geralmente conhecido como   paginação por demanda   endereçamento virtual também permite a criação de partições virtuais de memória em duas áreas separadas  uma sedo reservada para o núcleo    espaço de núcleo    e o outro para os aplicativos    espaço de usuário     os aplicativos não tem permissão do processador para acessar a memória do núcleo  portanto prevenindo que um aplicativo possa danificar o núcleo em execução  esta partição fundamental de espaço de memória contribuiu muito para os projetos de núcleos realmente de propósito geral e é quase universal em tais sistemas  embora algumas núcleos de pesquisa  ex    singularity    usarem outros métodos     gerenciamento de dispositivos    para realizar funções úteis  processos precisam acessar   periférico  s conectados ao computador  que são controlados pelo núcleo através do   driver de dispositivo driver do dispositivo    por exemplo  para mostrar ao usuário algo utilizando a tela  um aplicativo teria que fazer um requisição ao núcleo que encaminharia a requisição para o seu driver de tela  que é responsável por realmente tracejar os carácteres pixeis  ref name  os-concepts   um núcleo deve manter uma lista de dispositivos disponíveis  esta lista pode ser conhecida de antemão  ex  em um sistema embarcado onde o núcleo será reescrito se o hardware disponível mudar   configurado pelo usuário  típico em computadores pessoais antigos e em sistemas projetados para uso pessoal  ou detectado pelo sistema durante a execução  normalmente chamado   ligar e usar    num sistema  ligar e usar   um dispositivo realiza primeiro uma sondagem nos diferentes   barramento  s de hardware  como   interconector de componentes periféricos    pci  ou   universal serial bus barramento serial universal    usb   para detetar os dispositivos instalados  depois procura os drivers apropriados como a gestão de dispositivos é uma tarefa muito especifica do so  os drivers são manipulados de forma diferente pelo tipo de arquitetura do núcleo  mas em todos os casos  o núcleo tem que fornecer a   entrada saída   para permitir que os drivers acedam fisicamente seus dispositivos através alguma porta ou localização da memória  decisões muito importantes precisam ser feitas ao projetar o sistema de gestão de dispositivos  já que em alguns projetos de acesso podem envolver   troca de contexto trocas de contexto     tornando a operação custosa para o processador e causando um gasto excessivo de recursos     chamadas do sistema      -- esta parece uma seção de  perspectiva rasa   uma definição mais genérica ajudaria bastante -- para realmente realizar algo útil  um processo deve acessar os serviços oferecidos pelo núcleo  isto é implementado por cada núcleo  mas a maioria oferece uma   biblioteca padrão do c   ou uma   interface de programação de aplicativos    que envolve as funções relativas ao núcleo  ref   ref o método de invocar as funções do núcleo varia de núcleo para núcleo  se o isolamento de memória está sendo usado  é impossível para um processo de usuário chamar o núcleo diretamente  por que isso seria uma violação das regras de controle de acesso do processador  algumas possibilidades são   usar uma   interrupção   de software simulada  este método está disponível na maioria dos hardwares  e é  portanto  muito comum   usando um   portão de chamada    um portão de chamada é um endereço especial armazenado pelo núcleo em uma lista na memória do núcleo em uma localização conhecida pelo processador  quando o processador detecta uma chamada para este endereço  ele ao invés disso redireciona para a localização alvo sem causar nenhuma violação de acesso  exige suporte no hardware  mas este tipo de hardware é muito comum   usando uma instrução de chamada de sistema especial  esta técnica exige suporte especial no hardware  que em algumas arquiteturas habituais não possuem  notavelmente    x86     instruções de chamadas de sistema foram adicionadas a modelos recentes do processadores x86  embora  poucos  mas não todos  sistemas operativos fazem uso destes quando disponíveis   usando uma fila baseada na memória  um aplicativo que faz um grande número de requisições mas não precisa esperar o resultado de cada uma pode adicionar detalhes das requisições em uma área da memória que o núcleo sonda periodicamente para encontrar requisições    decisões de desenho do núcleo       problemas com o suporte do núcleo para proteção    uma consideração importante no desenho do núcleo é o suporte que ele oferece para proteção contra faltas    tolerância a falhas em software tolerância a falhas    e de comportamentos   mal-intencionados    segurança de computador segurança     estes dois aspectos geralmente não são claramente distinguidos  e a   separação entre proteção e segurança separação   no desenho do núcleo leva a rejeição de uma   anel  segurança  estrutura hierárquica de proteção    ref name  wulf74    os mecanismos ou políticas oferecidos pelo núcleo podem ser classificados de acordo com vários critérios  como  estático  forçado durante o   tempo de compilação    ou dinâmico  forçado durante o   tempo de execução     preemptivo ou pós-detecção  de acordo com os princípios de proteção a que eles correspondem  ex    peter j  denning denning   ref name  denning76  denning 1976  ref  ref name  swift05denning76  swift 2005  p 29 quote   isolação  controle de recursos  verificação de decisão  checagem   e recuperação de erros    ref    quer eles sejam suportados pelo hardware ou baseados em linguagem   quer eles sejam mais um mecanismo aberto ou ma política compulsiva  e muito mais      tolerância a falhas     uma medida útil para o nível de tolerância a falhas de um sistema é quão estrito ele é com relação ao   princípio do menor privilégio    ref cook  d j     http   portal acm org citation cfm id 803220 medindo a proteção da memória     aceito na terceira conferência internacional da engenharia de software  atlanta  georgia  maio de 1978   ref  em casos onde múltiplos programas estão rodando em um único computador  é importante prevenir falhas em um dos programas de afetar negativamente outro  estendendo-se ao desenho com más-intenções mais do que a falha em si  isto também implica a   segurança de computadores segurança    quando é necessário impedir processos de acessar informações sem que lhes seja dada a devida permissão as duas principais implementações via hardware ref name  swift05  swift 2005 p 26  ref  para proteção  de informações sensíveis  são   anel  segurança  domínios hierárquicos de proteção    também chamadas arquiteturas anel  arquiteturas de segmento ou   anel  segurança  modo supervisor modo supervisor     ref intel corporation 2002  ref  e   endereçamento baseado em capacidades    ref houdek et al  1981  ref   imagem priv rings svg 250px thumb direita   anel de privilégio anéis de privilégio    como na   x86    são uma abordagem habitual de   anel  segurança  domínios hierárquicos de proteção   usados em muitos sistemas comerciais para obter algum nível de tolerância a falhas   domínios hierárquicos de proteção são muito menos flexíveis  como no caso de qualquer núcleo com uma estrutura hierárquica presumida como um critério de desenvolvimento global  ref name  wulf74     no caso de proteção não é possível designar diferentes privilégios a processos que não estão no mesmo nível de privilégio  e por isso não é possível corresponder aos quatro princípios de   peter j  denning denning   para a tolerância a falhas  ref name  denning76     ref name  swift05denning76     particularmente o princípio do menor privilégio  domínios hierárquicos de proteção também carregam uma enorme desvantagem na performance  já que a interação entre diferentes níveis de proteção  quando um processos tem que manipular uma estrutura de dados em ambos  modo usuário  e  modo supervisor   sempre exige cópia de mensagens  transmissão   estratégia de avaliação chamada por valor por valor     ref name  hansen73supervisormode  hansen 73  seção 7 3 p 233    interações entre diferentes níveis de proteção exigem a transmissão de mensagens por valor     ref  um núcleo baseado em capacidades  no entanto  é mais flexível em designar privilégios  pode corresponder aos princípios de denning para a tolerância a falhas  ref name  lindencapabilityaddressing  linden 76  ref  e geralmente não sofrem de problemas de performance da cópia por valor ambas implementações tipicamente exigem algum suporte de hardware ou firmware para serem operáveis e eficientes  o suporte de hardware para domínios hierárquicos de proteção ref name  schroeder72  schroeder 72  ref  geralmente é de    modos de cpu     um modo simples e eficiente de fornecer suporte a hardware é delegar à   unidade de gerenciamento de memória   a responsabilidade por checar as permissões de acesso para todos acessos a memória  um mecanismo chamado   endereçamento baseado em capacidades    ref name  lindencapabilityaddressing     falta na maioria das arquiteturas comerciais  o suporte a mmu para capacidades uma abordagem alternativa é simular capacidades usando domínios hierárquicos comumente suportados  nesta abordagem  cada objeto protegido deve residir num espaço de endereçamento ao qual o aplicativo não possui acesso  o núcleo também mantém uma lista de capacidades em tal memória  quando um aplicativo precisa acessar um objeto protegido por uma capacidade  ele realiza uma chamada de sistema e o núcleo realiza o acesso a ele  o custo de performance de trocar de espaço de endereçamento limita a praticabilidade desta abordagem em sistemas com interações complexas entre objetos  mas é utilizado nos sistemas operativos atuais para objetos que não são acessados frequentemente ou que não devem ser feitos rapidamente  ref name  eranianmosberger  stephane eranian   david mosberger   http   www informit com articles article aspx p 29961 memória virtual no núcleo linux ia-64   prentice hall ptr  2002  ref  ref silberschatz   galvin  conceitos de ssistema operativo  4th ed  pp445   446  ref implementações onde os mecanismos de proteção não suportados pelo firmware  mas são  ao invés disso  simulados em níveos mais altos  ex  simulando capacidades ao manipular tabelas de páginas em hardware que não possui suporte direto   são possíveis  mas há implicações de performance  ref name  hochbrowne    ref  no entanto  falta de suporte no hardware pode não ser problema  para sistemas que escolhem usar uma proteção baseada em linguagem  ref name  schneider    ref uma decisão importante no projeto do núcleo é a escolha dos níveis de abstração em que os mecanismos e políticas de segurança devem ser implementados  os mecanismos de segurança do núcleo têm um papel crítico no suporte a segurança nos níveis superiores  ref name  lindencapabilityaddressing     ref name  loscocco98    ref j  lepreau e outros     http   doi acm org 10 1145 504450 504477 a relevância persistente do ssistema operativo local aos aplicativos globais     procedimentos da 7  acm sigops eur  noinclude cshelf book001 book001 html segurança da informação  uma coleção integrada de dissertações   ieee comp  1995   ref  ref j  anderson     http   csrc nist gov publications history ande72 pdf estudo de planejamento de segurança de computadores   air force elect  systems div   esd-tr-73-51  outubro de 1972   ref  ref     ref uma abordagem é utilizar suporte no núcleo e firmware para tolerância a falhas  ver acima   e montar as políticas de segurança para comportamento malicioso em cima disso  adicionando recursos como mecanismos de   criptografia   quando necessário   delegar mais responsabilidade para o   compilador    implementações que delegam a aplicação de políticas de segurança para o compilador e ou nível do aplicativo são geralmente chamados   segurança baseada em linguagem   a falta de muitos mecanismos críticos de segurança nos principais sistemas operativos impede a implementação adequada de políticas de segurança no   nível de abstração   do aplicativo  ref name  loscocco98  p  a  loscocco  s  d  smalley  p  a  muckelbauer  r  c  taylor  s  j  turner  and j  f  farrell     http   www jya com paperf1 htm a inevitabilidade do futuro  a presunção falsa de segurança no ambiente de computação moderna     em procedimentos da 21  conferência nacional de segurança de sistemas de informação  páginas 303 314  out  de 1998   http   csrc nist gov nissc 1998 proceedings paperf1 pdf    ref  na verdade  um engano muito comum na segurança de computadores é que qualquer política de segurança pode ser implementada no aplicativo  independentemente do suporte no núcleo  ref name  loscocco98        proteção baseada em hardware ou linguagem     hoje  típicos sistemas de computação usam regras aplicadas pelo hardware sobre quais programas têm permissão para acessar quais dados  o processador monitora a execução e desliga um programa que viole uma regra  ex   um processo de usuário que tenta ler ou escrever na memória do núcleo  e assim por diante   em sistemas que não possuem suporte para capacidades  processos são isolados um do outro  utilizando-se espaços de endereçamento separados  ref   ref  chamadas de um processo de usuário no núcleo são regidas pela exigência de que eles usem um dos métodos de chamada do sistema descritos acima uma abordagem alternativa é usar proteção baseada em linguagem  em um   sistemas baseado em linguagem sistema de proteção baseado em linguagem    o núcleo vai permitir a execução apenas de código produzido por um   compilador   em que ele confie  a linguagem pode então  ser projetada de modo tal que será impossível para o programador instruir algo que violaria os requisitos de segurança  ref name  schneider   desvantagens incluem   demora maior para a inicialização efetiva do aplicativo  aplicativos deve ser verificadas sempre que elas são iniciadas para garantir que eles foram compiladas utilizando um compilador  corret   ou podem necessitar de recompilação de ambos   código fonte   ou   bytecode     sistema s de tipo inflexível  em sistemas tradicionais  aplicativos realizam frequentemente operações que não são de   tipagem forte    tais operações  não podem ser permitidas em um sistema de proteção baseado em linguagem  o que significa que aplicativos podem precisar ser reescritos e podem  em alguns casos  perder performance vantagens desta abordagem incluem   separação de espaços de endereçamento desnecessária  a troca de espaços de endereçamento é uma operação lenta que causa grande degradação na performance  e muito trabalho de otimização é feito atualmente para prevenir trocar desnecessárias nos sistemas operativos  trocar é complemente desnecessário em um sistema de proteção baseada em linguagem  já que todo código opera no mesmo espaço de endereçamento   flexibilidade  qualquer esquema de proteção que possa ser desenvolvida para ser expresso através de linguagem de programação pode ser implementada através deste método  mudanças no esquema de proteção  ex  de um sistema hierárquico para um baseado em capacidades  não exigem novo hardware exemplos de sistemas com proteção baseada em linguagem incluem o   jx   e   singularity       cooperação de processos      edsger dijkstra   provou que partindo de um ponto de vista lógico  operações   atomicidade atômicas   de   trava  ciência da computação  travamento   e destravamento operando em   semáforo  computação  semáforos   binários são suficientemente primitivos para expressar a qualquer funcionalidade de cooperação entre processos  ref name  dijkstra65  dijkstra  e  w    processos sequenciais cooperadores    math  dep   technological u   eindhoven  set  1965   ref  no entanto esta abordagem é geralmente tomada como deficiente em termos de segurança e eficiência  enquanto que uma abordagem via   troca de mensagens   é mais flexível  ref name  hansen70        gerenciamento de dispositivos de entrada saída    a ideia de um núcleo onde dispositivos de entrada saída são gerenciados uniformemente com outros processos  como processos paralelos em cooperação  foi proposta e implementada primeiramente por   brinch hansen    embora ideias similares tenham sido sugeridas em 1967 ref   ref  ref   ref    na descrição de hansen disto  os processos  comuns  são chamados   processos internos    enquanto que os dispositivos de entrada saída são chamados   processos externos    ref name  hansen70       abordagens de desenvolvimento de todo o núcleo   naturalmente  as tarefas e recursos listados acima podem ser fornecidas de vários modos que diferem entre si em projeto e implementação o princípio da     separação entre mecanismo e política separação entre o mecanismo e a política     é a diferença substancial entre a filosofia de micronúcleo e núcleo monolítico  ref baiardi 1988  ref  ref name  levin75  levin 75  ref  aqui um   mecanismo   é o apoio que permite a implementação de várias políticas diferentes  enquanto uma política é um  modo de operação  particular  por exemplo  uma mecanismo pode oferecer às tentativas de entrada de um usuário um método de chamar um servidor de autorização para determinar se um acesso deve ser dado  uma política pode ser para o servidor de autorização exigir uma senha e checá-la contra uma senha   função de embaralhamento criptográfico embaralhada   armazenada numa base de dados  devido ao fato do mecanismo ser genérico  a política pode ser alterada com mais facilidade  ex  ao exigir o uso de um   token  chave eletrônica  passe    do que se um mecanismo e política fossem integrados no mesmo módulo em um micronúcleo mínimo algumas políticas básicas são incluídas  ref name  levin75     e seus mecanismos permite que o que está rodando sobre o núcleo  a parte remanescente do sistema operativo e outras aplicações  decida quais políticas adotar  como gerenciamento de memória  escalonamento de processo de alto nível  gerenciamento de sistema de arquivos  etc    ref name  wulf74     ref name  hansen70     um núcleo monolítico ao invés disso  tende a incluir várias políticas  então restringindo o resto do sistema dependente delas   per brinch hansen   apresentou um argumento   convicção convincente   a favor da separação do mecanismo e da política  ref name  wulf74     ref name  hansen70     a falha em preencher completamente esta separação  é uma das maiores causas para a falta de inovação nos sistemas operativos existentes atualmente  ref name  wulf74     um problema comum nas arquiteturas de computador  ref name  denning80  denning 1980  ref  ref name  nehmer91  j rgen nehmer    http   portal acm org citation cfm id 723612 a imoralidade dos sistemas operativos  ou  pesquisa nos sistemas operativos ainda é justificável     notas em ciência da computação  vol  563  processo da oficina internacional sobre sistemas operativos dos anos 90 em diante  pp  77 - 83  1991  isbn 3-540-54987-0  http   www sigmod org dblp db conf dagstuhl os1991 html  citação   os últimos 25 anos mostraram que a pesquisa sobre arquiteturas de sistemas operativos teve pouco efeito nos principais sistemas operativos    http   www soe ucsc edu  brucem soft ins dissert html   ref  ref levy 84  p 1 citação   embora a complexidade dos aplicativos de computador aumenta anualmente  a arquitetura de hardware subjacente para aplicativos se manteve intocada por décadas    ref  o projeto monolítico é induzido pela abordagem de arquitetura  modo núcleo   modo usuário  para proteção  tecnicamente chamada de   anel  segurança  domínios hierárquicos de proteção     que é comum em sistemas comercias convencionais  ref name  levy84privilegedmode  levy 84  p 1 citação   arquiteturas convencionais suportam um único modo privilegiado de operação  esta estrutura leva a um desenvolvimento monolítico  qualquer módulo precisando de proteção deve ser parte do único núcleo do sistema operativo  se  ao contrário  qualquer módulo pudesse executar em um domínio protegido  sistemas poderiam ser construídos como uma coleção de módulos independentes ampliáveis por qualquer usuário    ref  na verdade  todo módulo que necessite de proteção é portanto preferivelmente incluído no núcleo  ref name  levy84privilegedmode    esta ligação entre projeto e  modo privilegiado  pode ser reconduzida até o problema chave da separação do mecanismo e da política  ref name  wulf74    de fato  a abordagem de arquitetura de  modo privilegiado  se funde ao mecanismo de proteção com as políticas de segurança  enquanto a principal abordagem de arquitetura alternativa     endereçamento baseado em capacidades    claramente distingue ambos  levando naturalmente ao desenvolvimento de um micronúcleo design ref name  wulf74     veja   separação entre proteção e segurança    enquanto   núcleo monolítico núcleos monolíticos   executam todo seu código no mesmo espaço de endereçamento    espaço de núcleo      micronúcleo  informática  micronúcleos   tentam executar a maior parte dos seus serviços no espaço de usuário  buscando aprimorar a manutenção e modulabilidade do código base  ref name  mono-micro  roch 2004  ref  a maioria dos núcleos não se encaixa exatamente em uma destas categorias  sendo mais encontrados entre estes dois projetos  os chamados   núcleo híbrido núcleos híbridos    projetos mais exóticos como   nanonúcleo  s e   exonúcleo  s estão disponíveis  mas são usados raramente utilizado para sistemas produtivos  o virtualizador   xen    por exemplo  é um exonúcleo   imagem kernel-monolithic svg thumb 260px diagrama de núcleos monolíticos       núcleos monolíticos    em um núcleo monolítico  todos os serviços do sistema operativo rodam junto com a linha de execução principal do núcleo  portanto  também se encontram na mesma área de memória  esta abordagem permite o acesso vasto e poderoso de hardwares  alguns desenvolvedores  como desenvolvedor do unix ken thompson  defendem que é  mais fácil de implementar um núcleo monolítico  ref name  linuxisobsoletedebate    ref  que micronúcleos  as principais desvantagens de núcleos monolíticos são as dependências entre os componentes do sistema - um defeito em um driver de dispositivo pode paralisar todo o sistema - e o fato de núcleos grandes podem se tornar muito difíceis de manter   imagem kernel-microkernel svg thumb 260px na abordagem do   micronúcleo  informática  micronúcleo    o próprio núcleo fornece apenas funcionalidades básicas que permite a execução de   cliente-servidor servidores    programas separados que assumem funções que seriam do núcleo monolítico  como drivers de dispositivos  servidores de interface de usuário  etc       berkeley software distribution bsd      linux  núcleo  linux      ms-dos   e derivados  incluindo   windows 95      windows 98   e   windows me      solaris      palm os    imagem kernel-microkernel svg thumb direita diagrama de interação de um micronúcleo       micronúcleos      -- esta seção é ligada de   filosofia unix   -- a abordagem de micronúcleo consiste em definir abstrações simples sobre o hardware  com um conjunto de primitivos ou   chamada de sistema chamadas de sistema   para implementar serviços mínimos do sistema operativo como   gerenciamento de memória      multitarefas    e   comunicação entre processos    outros serviços  incluindo aqueles normalmente fornecidos por um núcleo monolítico como   rede de computadores rede    são implementados em programas de espaço de usuário  conhecidos como   servidores    micronúcleos são mais fáceis de manter do núcleos monolíticos  mas um grande número de chamadas de sistemas de   troca de contexto trocas de contexto   podem desacelerar o sistema por que eles geralmente geram mais degradação na performance do que simples chamadas de função um micronúcleo permite a implementação das partes restantes do sistema operativo como aplicativos normais escritos em   linguagem de alto nível    e o uso de diferentes sistemas operativos sobre o mesmo núcleo não-modificado  ref name  hansen70     ele também torna possível alternar dinamicamente entre sistemas operativos e manter mais de um deles ativos simultaneamente  ref name  hansen70        hurd      minix      gnu mach mach      núcleos monolíticos x micronúcleos    conforme o núcleo do computador crescem  um número de problemas se tornam evidentes  um dos mais óbvios é que o   espaço de memória   aumenta  isto é mitigado de certo modo ao aperfeiçoar o sistema de   memória virtual    mas nem todas   arquitetura de computador   suportam memórias virtuais  ref endereçamento virtual é comumente mais obtido através da   unidade de gerenciamento de memória   incorporado   ref  para reduzir o espaço utilizado pelo núcleo  modificações extensivas precisam ser realizadas para remover cuidadosamente código inútil  que pode ser muito difícil devido a dependências pouco aparentes entre partes de um núcleo com milhões de linhas de código pelo começo dos anos 1990  devido a vários problemas de núcleos monolíticos em comparação a micronúcleos  núcleos monolíticos foram considerados obsoletos por virtualmente todos pesquisadores de sistemas operativos  como resultado  o projeto do   linux    um núcleo monolítico mais do que um micronúcleo foi o tópico da famosa discussão   flamming inflamada   entre   linus torvalds   e   andrew s  tanenbaum andrew tanenbaum    ref name  torvaldstanenbaum  registros do debate entre torvalds e tanenbaum podem ser encontrados em  http   www dina dk  abraham linus vs tanenbaum html dina dk    http   groups google com group comp os minix browse thread thread c25870d7a41696d2 f447530d082cd95d tvc 2 f447530d082cd95d groups google com    http   www oreilly com catalog opensources book appa html oreilly com  e  http   www cs vu nl  ast reliable-os  sítio do andrew tanenbaum   ref  há méritos em ambos argumentos presentes no   debate entre tanenbaum e torvalds debate tanenbaum torvalds        performances       núcleo monolítico núcleos monolíticos   são projetados para que todo o seu código fique no mesmo espaço de endereçamento    espaço de núcleo     que alguns desenvolvedores argumentam ser necessário para aumentar a performance do sistema  ref name  matthewrussell    alguns desenvolvedores também sustentam a hipótese de que núcleos monolíticos são extremamente eficientes se forem bem escritos  ref name  matthewrussell   citação   a natureza fortemente unida do núcleo monolítico permite torná-lo eficiente no uso do hardware subjacente       micronúcleos  por outro lado  rodam um número muito maior de processos no espaço de usuário        infelizmente  estes benefícios trazem o custo de micronúcleos terem a necessidade de passar informações dentro e fora do espaço do núcleo através de um processos chamado troca de contexto  trocas de contexto trazem uma degradação de performance considerável   estas afirmações não fazem parte de um artigo revisto por partes   ref a performance de micronúcleos construídos nos anos 1980 e começos dos 1990 era terrível  ref name  liedtke95    ref name  hartig97  h rtig 97  ref  estudos empíricos que mediram a performance destes micronúcleos não analisaram os motivos para tal ineficiência   ref name  liedtke95    as explicações para estes dados foram deixadas para o  folclore   -- alguém precisa esclarecer o que é dito  folclore  aqui --   com a suposição de que eles eram devido ao aumento da frequência da troca de modo núcleo para modo usuário  ref name  liedtke95    devido a maior frequência de   comunicação entre processos   ref name  liedtke95    e a maioria frequência de   troca de contexto trocas de contexto    ref name  liedtke95      -- ainda precisa ser tratado nesta seção o impacto  particularmente no contexto da frequência de trocas  da implementação de drivers de serviço como processos ou procedimentos -- de fato  como foi conjeturado em 1995  os motivos para a terrível performance dos micronúcleos pode também ter sido   1  uma real ineficiência na implementação de toda a   abordagem   de micronúcleo   2    conceitos   particulares implementados nesses micronúcleos  e  3  a   implementação   individual destes conceitos  ref name  liedtke95    portanto ainda falta estudar se a solução para construir um micronúcleo eficiente foi  ao contrário de tentativas anteriores  a de aplicar as técnicas corretas de construção  ref name  liedtke95   no outro extremo  a arquitetura de   anel  segurança  domínios hierárquicos de proteção   que leva a um projeto de núcleo monolítico ref name  levy84privilegedmode    gera impactos significativos na performance cada vez que há uma interação entre diferentes níveis de proteção  ex  quando um processo tem que manipular uma estrutura de dados em ambos  modo usuário  e  modo supervisor    desde que isto exija cópia de mensagem   estratégia de avaliação chamada por valor por valor    ref name  hansen73supervisormode    em meados de 1990  a maioria dos pesquisadores abandonou a crença de que ajustes cuidadosos poderiam reduzir estes impactos dramaticamente  mas recentemente  novos micronúcleos  otimizados para performance  tais como os   núcleo l4 l4   ref name  l4    ref  e   k42   vêm trabalhando nestes problemas   imagem kernel-hybrid svg thumb 260px a abordagem de   núcleo híbrido   combina velocidade e projetos mais simples de um núcleo monolítico com a modularidade e execução segura de um micronúcleo       núcleos híbridos    núcleos híbridos são um acordo entre o desenvolvimento de micronúcleos e núcleos monolíticos  isto implica executar alguns serviços  como a   pilha de rede   ou o   sistema de arquivos    no espaço do núcleo para reduzir o impacto na performance de um micronúcleo tradicional  mas ainda executar o código no núcleo  como drivers de dispositivos  como servidores no espaço de usuário     beos       haiku  sistema operacional  haiku      windows nt microsoft windows nt      xnu    núcleo do   darwin  sistema operativo  darwin   utilizado no   mac os x       nanonúcleos    um nanonúcleo delega virtualmente todos os serviços   incluindo até os mais básicos como   controlador de interrupção programada controlador de interrupções   ou o   temporizador     para   driver de dispositivo drivers de dispositivo   para tornar o requerimento de memória do núcleo ainda menor do que o dos tradicionais micronúcleos  ref   ref     adaptive domain environment for operating systems adeos      dycos    http   www13 informatik tu-muenchen de forschung modis dycos      eros      eka2      jari operating system    http   jarios org      jnode      keykos      lse os      mac os nanonúcleo      ozone      trion operating system      xtratum    http   www xtratum org    imagem kernel-exo svg thumb direita diagrama de interação de um exonúcleo       exonúcleos    um exonúcleo é um tipo de núcleo que não abstrai hardware in modelos teóricos  ao invés disso ele aloca recursos físicos de hardware  como o tempo de um processador  páginas de memória  e blocos de disco  para diferentes programas  um programa rodando em um exonúcleo pode ligar para uma   biblioteca do sistema operativo   que usa o exonúcleo para simular as astrações de um sistema operativo conhecido  ou ele pode desenvolver abstrações específicas para aquele aplicativo para ume performance superior  ref   ref    história do desenvolvimento do núcleo       núcleos dos primeiros sistemas operativos    falando estritamente  um sistema operativo  e  isto inclui um núcleo  não é   obrigado   a rodar um computador  programas podem ser carregados diretamente e executados na máquina de  metal descoberto   desde que os autores destes programas estiverem dispostos a trabalhar sem nenhuma abstração de hardware ou suporte a sistema operativo  os primeiros computadores operaram deste maneira durante os anos de 1950  começo dos 1960  eram reiniciados e recarregados entre cada execução de diferentes programas  eventualmente  pequenos programas auxiliares como   carregador de programa carregadores de programas   e   depurador  es foram mantidos na memória entre as execuções  ou carregados de   memória somente de leitura     conforme estas eram desenvolvidas  elas formaram a base do que depois se tornaria o núcleo dos sistemas operativos  a abordagem de   metal descoberto  metal descoberto    ainda é usada hoje em alguns   console de videogame consoles de vídeo-jogo   e   sistema embarcado sistemas embarcados    mas no geral  computadores novos usam sistemas operativos e núcleos modernos em 1969 o   rc 4000 multiprogramming system   introduziu a filosofia de desenvolvimento de sistemas de pequeno   nucleus    na qual sistemas operativos para diferentes propósitos poderiam ser criados de maneira metódica   ref name  hansen2001rc4k  hansen 2001  os   pp 17-18  ref  algo que poderia ser chamado de abordagem de micronúcleo     sistemas operativos de tempo compartilhado    na década precedendo o fenômeno   unix    computadores aumentaram muito em poder de processamento   ao ponto onde operadores de computador estavam buscando novos modos de conseguir com que as pessoas usarem o tempo livre em seus computadores  uma das maiores evoluções durantes esta era foi o   tempo compartilhado    onde um número de usuários conseguiria pequenas parcelas do tempo do computador  em uma taxa que pareceria que eles estavam cada um conectado a sua própria máquina  embora mais lenta  ref   ref o desenvolvimento dos sistemas de tempo compartilhado levou a inúmeros problemas  um deles foi que usuários  particularmente em universidades  onde os sistemas estavam sendo desenvolvidos  pareciam tentar   hackear   o sistema para conseguir mais tempo de   unidade central de processamento processamento    por esta razão    segurança de computadores segurança   e   controle de acesso controles de acesso   se tornaram um foco principal do projeto   multics   em 1965  ref   ref  outro problema corrente era gerenciar apropriadamente os recursos do sistema  usuários gastavam a maior parte do tempo iniciando na tela e pensando ao invés de realmente utilizar os recursos do computador  e o sistema de tempo compartilhado deveria dar tempo de processamento para um usuário ativo durante estes períodos  por fim  tipicamente os sistemas ofereciam uma   hierarquia de memória   de várias camadas de profundidade  e particionar este recurso caro levou a um grande desenvolvimento nos sistemas de   memória virtual       unix      imagem unix-history svg 300px thumb diagrama da relação de família de predecessor sucessor para os sistemas   tipo unix     durante a fase de projeto do   unix    os programadores decidiram modelar todo dispositivo de alto nível   arquivo de dispositivo como um arquivo    por que eles acreditavam que o propósito da computação era a transformação de dados  ref name  unix    ref  por exemplo  impressoras eram representadas como um  ficheiro  em uma localização conhecida   quando dados eram copiados para o arquivo  ela imprimia-os  outros sistemas  para fornecer uma funcionalidade similar  possuem a tendência de virtualizar dispositivos em um nível mais baixo   ou seja  ambos dispositivos   e   ficheiros seriam instâncias de algum conceito de nível inferior  virtualizar o sistema a nível de ficheiros permitiu aos usuários manipular todo o sistema usando seus conceitos e ferramentas de gerenciamento de ficheiros  simplificando a operação dramaticamente  como uma extensão do mesmo paradigma  o unix permite que programadores manipulem arquivos usando uma série de pequenos programas  usando o conceito de   encadeamento    que permitir aos usuários completar operações em etapas  alimentando um ficheiro através de uma cadeia de ferramentas de propósito único  embora o resultado final fosse o mesmo  usar programas menores deste modo aumentou drasticamente a flexibilidade  assim como o uso e desenvolvimento  permitindo que o usuário modificasse seu fluxo de trabalho ao adicionar ou remover um programa da cadeia no modelo unix  o   sistema operativo   consiste de duas partes  primeira  a enorme coleção de programas de utilidades que guiam a maioria das operações  ref name  unix    no unix  do ponto de vista da programação  a distinção entre os dois é extremamente tênue  o núcleo é um programa rodando no modo supervisor ref name  supervisor    que age como um carregador de programas e supervisor para os pequenos programas de utilidade que integram o resto do sistema  e fornecem   trava  engenharia de software  travas   e serviços de   entrada saída   para estes programas  além disso  o núcleo não intervém de modo algum no   espaço de usuário   ao longo dos anos o modelo de computação mudou  e o tratamento do unix de tudo como um ficheiro ou fluxo de bytes não era mais universalmente aplicável como antes  embora um   terminal de computador terminal   pudesse ser tratado como um ficheiro ou fluxo de bytes  de que se exibia ou lia  o mesmo não parecia ser verdade para a   interface gráfica      rede de computador rede   se tornou outro problema  mesmo se a comunicação de rede pudesse ser comparada ao acesso de ficheiros  a arquitetura de baixo nível orientada a pacotes lidava com pedaços discretos de dados e não com ficheiros completos  conforme a capacidade dos computadores crescia  o unix se tornava cada vez mais desorganizado com relação a código  enquanto núcleos podiam ter 100 000   linhas de código fonte linhas de código   nos anos 1970 e 1980  núcleos sucessores modernos do núcleo do unix como o   linux   possuem mais de 4 5 milhões de linhas  ref   ref derivados modernos do unix são geralmente baseados um núcleos monolíticos que carregam módulos  exemplos disto são o   linux    um núcleo monolítico com suporte a núcleos  e diversas   distribuição linux distribuições   que o incluem  assim como os núcleos das variantes do   berkeley software distribution bsd   como   freebsd      dragonflybsd      openbsd      netbsd    etc  além destas alternativas  desenvolvedores amadores mantém uma comunidade ativa de   desenvolvimento de sistema operativo desenvolvimento de sistemas operativos    cheia de núcleos que são criados como passa-tempo que acabam compartilhando vários dos recursos com o linux  e ou os núcleos do freebsd  dragonflybsd  openbsd e netbsd e ou sendo compatíveis com eles  ref esta comunidade se reúne em sua maioria no  http   www osdever net desenvolvimento de so bona fide     http   www mega-tokyo com forum o fórum de mensagens mega-tokyo  e outros sítios de entusiastas de sistemas operativos   ref     mac os    a   apple   lançou   mac os   pela primeira vez em   empacotado com o seu   computador pessoal     apple macintosh macintosh apple    pelos primeiros lançamento  o mac os  ou sistema de software  como ele foi chamado  careceu de muitos recursos básicos  como multitarefas e um sistema hierárquico  com o tempo  o sistema operativo evoluiu  -- essa passagem está vaga  realmente nada aconteceu com relação ao núcleo em 8 lançamentos  evoluiu em quais sentidos  --  e se tornou o mac os 9 com alguns recursos adicionados  mas o núcleo se manteve basicamente o mesmo  em oposição a isto  o   mac os x   é baseado no   darwin  sistema operativo  darwin    que utiliza um conceito de núcleo híbrido chamado   xnu    criado combinando o núcleo do   berkeley software distribution 4 3bsd   e o   mach  núcleo  mach    ref   ref     amiga    o   amiga   da   commodore international commodore   foi lançado em   e estava dentre os primeiros  e certamente mais bem sucedidos  computadores domésticos a apresentar um sistema operativo com um micronúcleo   o núcleo do amiga  a   exec library    era pequena mas capaz  oferecendo multitarefas rápidas e preemptivas em hardware similar ao do apple macintosh  e um sistema avançado de   ligação dinâmica ligações dinâmicas   que permitia uma expansão fácil  ref   ref     microsoft windows    o   microsoft windows   foi lançado em 1985 como uma extensão para o   ms-dos    devido à sua dependência de outro sistema operativo  todas as versões até a 95 são consideradas um   ambiente operacional    e não um   sistema operativo   propriamente dito    tal linha de produtos continuou por 1980 e 1990  resultando nos lançamentos das séries   windows 9x    atualizando as capacidades do sistema para endereçamento de 32 bits e multitarefas preemptivo  ao longo dos anos 1990  terminando com o lançamento do   windows me   em 2000 o lançamento do   windows xp   em outubro de 2001 uniu as duas linhas de produto  com a intenção de combinar a estabilidade do núcleo nt com os recursos ao consumidor das séries 9x  ref   ref  a   arquitetura do windows nt arquitetura do núcleo do windows nt   é considerada híbrida pois o p oprio núcleo contém tarefas como o gerenciador de janelas e o gerenciador de comunicação entre processos  mas vários subsistemas são executados no modo de usuário  ref   ref  o ponto de quebra exato entre espaço de usuário e espaço de núcleo têm deslocado conforme a versão  mas a introdução do   arcabouço de driver de espaço de usuário   no windows vista  e escalonamento de linha de execução no espaço de usuário no   windows 7    ref   ref  deslocou mais recursos do núcleo para processos no espaço de usuário     desenvolvimento de micronúcleos    embora o   mach  núcleo  mach    desenvolvido na   universidade carnegie mellon   de  a   é o micronúcleo de propósito geral mais conhecido  outros micronúcleos foram desenvolvidos com objetivos mais específicos  um família de micronúcleos   l4  micronúcleo  l4    principalmente o micronúcleo l3 e o l4  foi criada para demonstrar que micronúcleos não são necessariamente lentos  ref name  l4    implementações mais novas como   fiasco  l4 clone  fiasco   e   pistachio  l4 clone  pistachio   são capazes de executar o   linux   junto com outros processo l4 em espaços de endereçamento separados  ref   ref  ref   ref   qnx   é um   sistema operativo de tempo-real   com um projeto de micronúcleo minimalista que vem sendo desenvolvido desde   sendo mais bem-sucedido do que o mach em alcançar os objetivos do paradigma do micronúcleo  ref   ref  ele é usado principalmente em   sistema embarcad sistemas embarcados   e em situações em que o software não pode falhar  como nos braços robóticos do   ônibus espacial   e máquinas que controlam a moeção de vidro a tolerâncias extremamente finas  onde um minúsculo erro poderia custar centenas de milhares de reais    ver também       comparação entre núcleos      compilador      driver de dispositivo      entrada saída      pedido de interrupção      memória  computador  memória       memória de acesso aleatório       memória virtual       memória paginada paginação      segmentação  memória  segmentação       memória paginada espaço de troca       espaço de usuário       unidade de gerenciamento de memória      multitarefa       processo  informática  processo       linha de execução       escalonamento       tempo compartilhado       troca de contexto       comunicação entre processos      sistema operativo    --   preciso achar uma tradução pra isso   trap  computing    --    referências              url   http   portal acm org citation cfm id 356680 dl acm coll  cfid 15151515 cftoken 6184618  doi 10 1145 356678 356680           incluído em livro      hermann h rtig    michael hohmuth    jochen liedtke    sebastian sch nberg  jean wolter    http   os inf tu-dresden de pubs sosp97  karshmer 1991 osa a performance de sistemas baseados no núcleo       http   doi acm org 10 1145 268998 266660  acm sigops operating systems review  v 31 n 5  p  66-77  dec  1997  houdek  m  e   soltis  f  g   and hoffman  r  l  1981     http   portal acm org citation cfm id 800052 801885 ibm system 38 support for capability-based addressing     in proceedings of the 8th acm international symposium on computer architecture  acm ieee  pp  341 348     intel corporation    2002     http   www intel com design pentium4 manuals 24547010 pdf the ia-32 architecture software developer s manual  volume 1  basic architecture           jochen liedtke liedtke  jochen       http   i30www ira uka de research publications papers index php lid en docid 642 sobre a construção do núcleo         proc  15th acm symposium on operating system principles  sosp     december 1995    http   csrc nist gov publications history lind76 pdf             http   www cs virginia edu papers p337-wulf pdf     swift  michael m  brian n  bershad   henry m  levy     http   nooks cs washington edu nooks-tocs pdf improving the reliability of commodity operating systems      http   doi acm org 10 1145 1047915 1047919  acm transactions on computer systems  tocs   v 23 n 1  p  77-110  february 2005   leituras importantes       andrew tanenbaum      operating systems - design and implementation  third edition      andrew tanenbaum    modern operating systems  second edition        daniel p  bovet      marco cesati      the linux kernel       david a  peterson      nitin indurkhya    patterson    computer organization and design      morgan koffman    small  isbn 1-55860-428-6   small      b s  chalk      computer organisation and architecture    macmillan p  isbn 0-333-64551-0     ligações externas      http   www kernel org kernel org  sítio oficial do linux     http   sourceforge net softwaremap trove list php form cat 144 núcleos de sistemas operativos no sourceforge    http   freshmeat net browse 144  núcleos de sistemas operativos no freshmeat    http   www pdos lcs mit edu exo html mit sistemaoperacional de exonúcleo    http   wiki debian org kernel image imagem de núcleo -  wiki debian    http   www cis upenn edu  keykos nanokernel nanokernel html a arquitetura do nanonúcleo do keykos   um artigo de 1992 por   norman hardy     e outros       http   www usenix org publications library proceedings sf94 full papers minshall a uma visão geral do ssistema operativo netware   um artigo de 1994 por drew major  greg minshall  e kyle powell  arquitetos pfincipais por trás do so netware     http   kernelnewbies org  kernelnewbies   uma comunidade para aprender a hackear o linux    http   widefox pbwiki com kernel 20comparison 20linux 20vs 20windows comparação detalhada entre os núcleos dos sistemas operativos mais populares 
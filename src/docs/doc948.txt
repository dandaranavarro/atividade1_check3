 em   ciência da computação       programação funcional    é um   paradigma de programação   que trata a computação como uma avaliação de   função matemática funções matemáticas   e que evita estados ou dados mutáveis  ela enfatiza a aplicação de   subrotina funções    em contraste da   programação imperativa    que enfatiza mudanças no estado do programa ref   ref  uma função  neste sentido  pode ter ou não ter   parâmetro  ciência da computação  parâmetros   e um simples valor de retorno  os parâmetros são os valores de entrada da função  e o valor de retorno é o resultado da função  a definição de uma função descreve como a função será avaliada em termos de outras funções  por exemplo  a função  math f x    x 2   2  math  é definida em termos de funções de   exponenciação   e   adição    do mesmo modo  a linguagem deve oferecer funções básicas que não requerem definições adicionais   linguagem de programação linguagens de programação   funcionais  especialmente as puramente funcionais  tem sido mais usadas academicamente que no   desenvolvimento de software desenvolvimento comercial de software    entretanto  algumas linguagens notáveis usadas na indústria e no comércio incluem   erlang  linguagem de programação  erlang    aplicações concorrentes  ref   ref     r  linguagem de programação  r    estatística     mathematica    matemática simbólica  ref   ref    j  linguagem de programação  j      k  linguagem de programação  k    análise financeira  e   xslt    ref   ref  ref   ref  importantes influências na programação funcional foram o   cálculo lambda    as linguagens de programação   apl   e   lisp    e mais recentemente   ml  linguagem de programação  ml      haskell  linguagem de programação  haskell      ocaml      f sharp f    e elixir    desenvolvimento   as funções podem ser manipuladas numa grande variedade de formas numa   linguagem de programação   funcional  as funções são tratadas como valores de primeira importância  o que é o mesmo que dizer que funções podem ser parâmetros ou valores de entrada para outras funções e podem ser os valores de retorno ou saída de uma função  então podemos entender paradigma funcional como um mapeamento dos valores de entrada nos valores de retorno  através de funções  isso permite que funções como  code mapcar  code  em   lisp   e  code map  code  em   haskell  linguagem de programação  haskell   que tomam ambos uma função e uma   lista encadeada lista   como entrada e aplicam a função de entrada a cada elemento da lista  funções podem ser nomeadas  como em outras linguagens  ou definidas anonimamente  algumas vezes durante a execução do programa  usando uma abstração   cálculo lambda lambda   e usadas como valores em outras funções  linguagens funcionais também permitem que funções sejam do tipo   curry        currying     é uma técnica para reescrita de funções com múltiplos parâmetros como a composição de funções de um parâmetro  a função do tipo   curry   pode ser aplicada apenas a um subconjunto de seus parâmetros  o resultado é uma função onde os parâmetros neste subconjunto são agora fixados como constantes  e os valores do resto dos parâmetros ainda não são especificados  esta nova função pode ser aplicada aos parâmetros restantes para obter o valor da função final  por exemplo  uma função  code adiciona x y    x   y  code  pode ser do tipo   curry   de forma que o valor de retorno  code adiciona 2   code    note que não há um parâmetro y   será uma função anônima  o que é equivalente à função  code adiciona2 y    2   y  code   esta nova função tem apenas um parâmetro e corresponde a adicionar 2 a um número  novamente  isso é apenas possível porque as funções são tratadas como valores de primeira importância o cálculo lambda pode ser considerado a primeira linguagem de programação funcional  embora nunca tenha sido projetada para ser realmente executada em um computador  é um modelo de computação projetado por   alonzo church   nos   década de 1930 anos 1930   que oferece um modo muito formal de descrever um cálculo de uma função  a primeira linguagem de programação funcional criada para computadores foi   lisp    desenvolvida por   john mccarthy   no   instituto de tecnologia de massachusetts    mit  no fim dos   anos 1950    mesmo não sendo uma linguagem de programação puramente funcional  lisp introduziu a maioria das características hoje encontradas nas modernas linguagens de programação funcional    scheme   foi uma tentativa posterior de simplificar e melhorar lisp  nos   anos 1970   a linguagem   ml  linguagem de programação  ml   foi criada pela   universidade de edimburgo    e   david turner   desenvolveu a linguagem   miranda  linguagem de programação  miranda   na universidade de kent  a linguagem   haskell  linguagem de programação  haskell   foi lançada no fim dos   anos 1980   numa tentativa de juntar muitas ideias na pesquisa de programação funcional    contraste com a programação imperativa   a programação funcional pode ser contrastada com a   programação imperativa    na programação funcional parecem faltar diversas construções freq entemente  embora incorretamente  consideradas essenciais em linguagens imperativas  como   linguagem de programação c c   ou   pascal  linguagem de programação  pascal    por exemplo  numa programação estritamente funcional  não há alocação explícita de   memória de computador memória    nem declaração explícita de   variável  programação  variáveis    no entanto  essas operações podem ocorrer automaticamente quando a função é invocada  a alocação de memória ocorre para criar espaço para os parâmetros e para o valor de retorno  e a declaração ocorre para copiar os parâmetros dentro deste espaço recém-alocado e para copiar o valor de retorno de volta para dentro da função que a chama  ambas as operações podem ocorrer nos pontos de entrada e na saída da função  então efeitos colaterais no cálculo da função são eliminados  ao não permitir efeitos colaterais em funções  a linguagem oferece transparência referencial  isso assegura que o resultado da função será o mesmo para um dado conjunto de parâmetros não importando onde  ou quando  seja avaliada  transparência referencial facilita muito ambas as tarefas de comprovar a correção do programa e automaticamente identificar computações independentes para execução paralela laços  outra construção de programação imperativa  estão presentes através da construção funcional mais geral de   recursividade  ciência da computação  recursividade    funções recursivas invocam a si mesmas  permitindo que uma operação seja realizada várias vezes  na verdade  isso prova que laços são equivalentes a um tipo especial de recursividade chamada recursividade reversa  recursividade em programação funcional pode assumir várias formas e é em geral uma técnica mais poderosa que o uso de laços  por essa razão  quase todas as linguagens imperativas também a suportam  sendo   fortran fortran 77   e   cobol   exceções notáveis  é bom lembrar que existem linguagens de programação modernas cujo uso está em plena expansão  como   scala linguagem de programação   que une de forma poderosa o paradigma funcional e o orientado a objetos   cousineau  guy and michel mauny    the functional approach to programming    cambridge  uk  cambridge university press  1998   graham  paul    ansi common lisp    englewood cliffs  new jersey  prentice hall  1996   hudak  paul   conception  evolution  and application of functional programming languages     acm computing surveys   21  no  3  1989   359-411   pratt  terrence  w  and marvin v  zelkowitz    programming languages  design and implementation    3rd ed  englewood cliffs  new jersey  prentice hall  1996   salus  peter h    functional and logic programming languages  vol  4 of handbook of programming languages     indianapolis  indiana  macmillan technical publishing  1998   thompson  simon    haskell  the craft of functional programming    harlow  england  addison-wesley longman limited  1996    ver também       cálculo lambda    categoria programação funcional    
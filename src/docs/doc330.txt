    c    é uma   linguagem compilada linguagem de programação compilada   de propósito geral    programação estruturada estruturada      programação imperativa imperativa      programação procedural procedural      organização internacional para padronização padronizada pela iso    criada em   1972    por   dennis ritchie    no   at t     bell labs    para desenvolver o   sistema operativo sistema operacional     unix    que foi originalmente escrito em   linguagem de montagem assembly     ref   ref c é uma das linguagens de programação mais populares ref   ref  ref   ref  e existem poucas arquiteturas para as quais não existem compiladores para c  c tem influenciado muitas outras linguagens de programação  ref   ref  mais notavelmente   c      que originalmente começou como uma extensão para c    história     imagem ken n dennis jpg 300px thumb   ken thompson   e   dennis ritchie    da esquerda para direita   os criadores das linguagens   b  linguagem de programação  b   e    c     respectivamente   o desenvolvimento inicial de c ocorreu no at t bell labs entre   1969   e   1973    ref name  dottcl    ref  de acordo com ritchie  o período mais criativo ocorreu em 1972  a linguagem foi chamada  c   porque suas características foram obtidas a partir de uma linguagem anteriormente chamado de    b  linguagem de programação    b     que de acordo com a   ken thompson   era versão reduzida da linguagem de programação   bcpl    ref  http   www le ac uk users rjm1 cotter page 06 htm a brief history of c   ref a versão original pdp-11 do sistema unix foi desenvolvido em   assembly     em 1973  com a adição dos tipos  code struct  code   a linguagem c tornou-se poderosa o suficiente para que a maior parte do     kernel     do   unix   fosse reescrito em c  este foi um dos primeiros núcleos de sistemas operacionais implementados numa linguagem diferente da linguagem   assembly    em 1977  foram feitas novas mudanças por ritchie e stephen c  johnson para facilitar a portabilidade do sistema operacional unix  o   portable c compiler   de johnson serviu de base para várias implementações de c em novas plataformas  ref name  unixport    ref     c k r    a linguagem c não teve um sucesso imediato após a sua criação e o seu uso ficou restrito a alguns laboratórios ref  data julho de 2000 acessodata  3 de junho de 2015 publicado  java report e c   report    ref   mas em 1978   brian kernighan   e dennis ritchie lançam o livro     the c programming language      ref name  kernighan    ref  que serviu de tutorial e mudou a história da programação em c  de fato essa primeira versão da linguagem é conhecida como  c kernigham e ritchie  ou apenas  c k r   ref name  hickson    ref esse livro  conhecido pelos programadores de c como  k r   serviu durante muitos anos como uma especificação informal da linguagem  a versão da linguagem c que ele descreve é usualmente referida como     k r c      a segunda edição do livro cobriu o padrão posterior  o   ansi c    k r c introduziu as seguintes características na linguagem   biblioteca padrão de   entrada saída e s    tipo de dados  code struct  code   tipo de dados  code long int  code   tipo de dados  code unsigned int  code   o operador  code     code  foi alterado para  code     code   e  code  -  code  para  code -   code   o   análise léxica analisador léxico   do compilador fazia confusão entre  code i    10  code  e  code i    10  code   o mesmo acontecia com  code  -  code  k r c é frequentemente considerado a parte mais básica da linguagem  cujo suporte deve ser assegurado por um   compilador   c  durante muitos anos  mesmo após a introdução do padrão ansi c  k r c foi considerado o  menor denominador comum   em que programadores de c se apoiavam quando uma   portabilidade  informática  portabilidade   máxima era desejada  já que nem todos os compiladores eram actualizados o bastante para suportar o padrão ansi c nos anos que se seguiram à publicação do k r c  algumas características  não-oficiais  foram adicionadas à linguagem  suportadas por compiladores da at t e de outros vendedores  estas incluíam   funções  code void  code  e tipos de dados  code void    code   funções que retornam tipos  code struct  code  ou  code union  code   campos de nome  code struct  code  num espaço de nome separado para cada tipo  code struct  code   atribuição a tipos de dados  code struct  code   qualificadores  code const  code  para criar um objecto só de leitura  biblioteca padrão  que incorpora grande parte da funcionalidade implementada por vários vendedores  enumerações  cálculos de ponto-flutuante em precisão simples  no k r c  os cálculos intermediários eram feitos sempre em  code double  code   porque era mais eficiente na máquina onde a primeira implementação do c foi feita     ansi c e iso c    durante os finais da   década de 1970    a linguagem c começou a substituir a linguagem   basic   como a linguagem de programação de   computador doméstico microcomputadores   mais usada  durante a   década de 1980    foi adaptada para uso no pc ibm  e a sua popularidade começou a aumentar significativamente  ao mesmo tempo    bjarne stroustrup    juntamente com outros nos laboratórios bell  começou a trabalhar num projecto onde se adicionavam extras para programação orientada por objectos à linguagem c  a linguagem que eles produziram  chamada   c      é nos dias de hoje a linguagem de programação de aplicações mais comum no sistema operativo   microsoft windows windows   da companhia   microsoft    a linguagem c permanece a mais popular no mundo   unix   em   1983    o instituto norte-americano de padrões    american national standards institute ansi    formou um comité  x3j11  para estabelecer uma especificação do padrão da linguagem c  após um processo longo e árduo  o padrão foi completo em   1989   e ratificado como ansi x3 159-1989  programming language c   esta versão da linguagem é frequentemente referida como ansi c  em   1990    o padrão ansi c  após sofrer umas modificações menores  foi adotado pela   organização internacional para padronização    iso  como    iso iec 9899 1990     também conhecido como c89 ou c90  um dos objetivos do processo de padronização ansi c foi o de produzir um sobreconjunto do k r c  incorporando muitas das características não-oficiais subsequentemente introduzidas  entretanto  muitos programas tinham sido escritos e que não compilavam em certas plataformas  ou com um certo compilador  devido ao uso de bibliotecas de funções não-padrão e ao fato de alguns compiladores não aderirem ao ansi c     c99    após o processo da padronização ansi  as especificações da linguagem c permaneceram relativamente estáticas por algum tempo  enquanto a linguagem c   continuou a evoluir   em   1995    a   normative amendment 1   criou uma versão nova da linguagem c mas esta versão raramente é tida em conta   contudo  o padrão foi submetido a uma revisão nos finais da   década de 1990    levando à publicação da norma    iso 9899 1999    em   1999    este padrão é geralmente referido como  c99  e foi adoptado como um padrão ansi em março de   2000    as novas características do c99 incluem   funções em linha  remoção de restrições sobre a localização da declaração de variáveis  como em c     adição de vários tipos de dados novos  incluindo o  code long long int  code   para minimizar problemas na transição de 32-bits para 64-bits   um tipo de dados boolean explicito  chamado    bool    e um tipo  code complex  code  que representa   número complexo números complexos      array vetores   de dados de comprimento variável  o vetor pode ter um tamanho diferente a cada execução de uma função  mas não cresce depois de criado   suporte oficial para comentários de uma linha iniciados por  code     code   emprestados da linguagem c    várias funções de biblioteca novas  tais como  code snprintf    code   vários ficheiros-cabeçalho novos  tais como  code stdint h  code o interesse em suportar as características novas de c99 parece depender muito das entidades  apesar do   gnu compiler collection gcc   e vários outros compiladores suportarem grande parte das novas características do c99  os compiladores mantidos pela microsoft e pela   borland   suportam pouquíssimos recursos do c99  e estas duas companhias não parecem estar muito interessadas em adicionar tais funcionalidades  ignorando por completo as normas internacionais  a microsoft parece preferir dar mais ênfase ao c    ref   ref     c11    em 2007  se iniciou o trabalho em antecipação de outra revisão do padrão de c  informalmente chamada de    c11    ou    c1x     o comitê dos padrões de c adotou regras para limitar a inserção de novos recursos que não tenham ainda sido testados por implementações existentes  ref   ref em dezembro de   2011   foi publicada a versão estável da especificação  como    iso iec 9899 2011       visão geral   c é uma linguagem imperativa e procedural  para implementação de sistemas  seus pontos de design foram para ele ser compilado  fornecendo acesso de   linguagem de programação de baixo nível baixo nível   à   memória ram memória   e baixos requerimentos do hardware  também foi desenvolvido para ser uma linguagem de alto nível  para maior reaproveitamento do código  c foi útil para muitas aplicações que foram codificadas originalmente em   linguagem de montagem assembly   essa propriedade não foi acidental  a linguagem c foi criada com o objectivo principal em mente  facilitar a criação de programas extensos com menos erros  recorrendo ao   paradigma   da   programação procedural    mas sobrecarregando menos o autor do   compilador    cujo trabalho complica-se ao ter de realizar as características complexas da linguagem  para este fim  a linguagem c possui as seguintes características   uma linguagem extremamente simples  com funcionalidades não-essenciais  tais como funções matemáticas ou manuseamento de ficheiros  arquivos   fornecida por um conjunto de   biblioteca  computação  bibliotecas de rotinas   padronizada  a focalização no paradigma de   programação procedural    um   tipo de dado sistema de tipos   simples que evita várias operações que não fazem sentido  uso de uma linguagem de   pré-processador pré-processamento    o    pré-processador de c     para tarefas tais como a definição de   macro  s e a inclusão de múltiplos ficheiros de   código fonte      ponteiro  programação  ponteiros   dão maior flexibilidade à linguagem  acesso de baixo nível  através de inclusões de código assembly no meio do programa c  parâmetros que são sempre passados por valor para as funções e nunca por referência  é possível simular a passagem por referência com o uso de ponteiros   definição do alcance lexical de variáveis  estruturas de variáveis   structs   que permitem que dados relacionados sejam combinados e manipulados como um todoalgumas características úteis  que faltam em c  podem ser encontradas em outras linguagens  que incluem   segurança de tipo    coletor de lixo    mais comum em   linguagem interpretada linguagens interpretadas     vetores que crescem automaticamente    classe  programação  classes   ou   objeto  s com comportamento    ver   orientação a objetos         clausura  ciência da computação  clausuras      composição de funções funções aninhadas    sobrecarga de operadores  meta-programação  apoio nativo de   multithreading   e comunicação por redeapesar da lista de características úteis que c possui não ser longa  isso não tem sido um impedimento à sua aceitação  pois isso permite que novos compiladores de c sejam escritos rapidamente para novas plataformas  e também permite que o programador permaneça sempre em controle do que o programa está a fazer  isto é o que por várias vezes permite o código de c correr de uma forma mais eficiente que muitas outras linguagens  tipicamente  só código de assembly  afinado à mão  é que corre mais rapidamente  pois possui um controle completo da máquina  mas avanços na área de compiladores juntamente com uma nova complexidade nos processadores modernos permitiram que a diferença tenha sido rapidamente eliminada uma consequência da aceitação geral da linguagem c é que frequentemente os compiladores  bibliotecas e até intérpretes de outras linguagens de nível maior sejam eles próprios implementados em c c tem como ponto forte  a sua eficiência  e é a linguagem de programação preferida para o desenvolvimento de sistemas e softwares de base  apesar de também ser usada para desenvolver   programa de computador programas de computador    é também muito usada no ensino de   ciência da computação    mesmo não tendo sido projetada para estudantes e apresentando algumas dificuldades no seu uso  outra característica importante de c  é sua proximidade do   código de máquina    que permite que um projetista seja capaz de fazer algumas previsões de como o software irá se comportar  ao ser executado c tem como ponto fraco  a falta de proteção que dá ao programador  praticamente tudo que se expressa em um programa em c  pode ser executado  como por exemplo  pedir o vigésimo membro de um vetor com apenas dez membros  os resultados são muitas vezes totalmente inesperados  e os erros  difíceis de encontrar     tipos de dados    c tem um sistema de tipos semelhante ao de alguns descendentes da linguagem   algol    tais como   pascal  linguagem de programação  pascal    possui tipos para números inteiros de vários tamanhos com e sem sinal    ponto flutuante números de ponto flutuante    caracteres e estruturas   code struct  code s  c usa extensivamente   ponteiro  programação  ponteiros    um tipo muito simples de    referência    que guarda o endereço de memória da variável  o ponteiro pode ser   desreferenciado    uma operação que busca o objeto que se encontra na morada da memória que o ponteiro possui  morada essa que pode ser manipulada através de aritmética de ponteiros  durante o   tempo de execução    o ponteiro é simplesmente uma morada de máquina tais como aquelas manipuladas em   assembly    mas em   tempo de compilação   possui um tipo complexo que indica o tipo do objecto para onde ele aponta  permitindo que se verifique o tipo de expressões  incluindo ponteiros  o tipo  string   cadeia ou linha de texto  de c é simplesmente um ponteiro para um vetor de caracteres e alocação dinâmica de memória  descrita abaixo  é efetuada através de ponteiros os ponteiros em c possuem um valor reservado especial   code null  code   que indica que não estão a apontar para uma morada  o uso desse valor como morada é muito útil na construção de várias estruturas de dados  mas causa comportamento não-definido  possivelmente uma falha de sistema  ao ser desreferenciado  um ponteiro que possui o valor  code null  code  é chamado   ponteiro nulo    os ponteiros são declarados  e desreferenciados  com um          asterisco   portanto o tipo   int    denota um ponteiro para número s  inteiro s   a linguagem c também fornece um tipo especial de ponteiros  o   void     que se traduz num ponteiro que aponta para um objeto de tipo desconhecido a linguagem c também tem apoio em nível de linguagem para vetores estáticos  de dimensão fixa  de tipos  as disposições de tipos podem parecer ter mais que uma dimensão apesar de serem tecnicamente disposições de disposições de tipos  em memória  tais estruturas são posicionadas com as linhas uma depois da outra  a alternativa seria armazenar os dados em colunas  usado em outras linguagens   o acesso a disposições de tipos é feito através de ponteiros e aritmética de ponteiros  o nome da disposição é tratado como se fosse um ponteiro que aponta para o início da disposição  em certas aplicações não é razoável usarem-se disposições de tipos de dimensão fixa e por isso a alocação dinâmica de memória pode ser usada para criar disposições de tipos de dimensão variável como a linguagem c é regularmente usada em programação de baixo-nível de sistemas  há casos em que é necessário tratar um número inteiro como sendo um ponteiro  um número de ponto flutuante como sendo um número inteiro ou um tipo de ponteiro como sendo outro  para estes casos  a linguagem c fornece a capacidade de  moldagem   também denominado  conversão de tipo  ou  casting    uma operação que  caso seja possível  força a conversão de um objeto de um tipo para outro  apesar de ser por vezes necessário  o uso de conversões de tipo sacrifica alguma segurança oferecida pelo sistema de tipos   into tipo de dado    int     inteiro  serve para armazenar valores numéricos inteiros  existem vários tipos de inteiros  cada um de um tamanho diferente  dependendo do sistema operacional e ou arquitetura do processador     code int  code   pode possuir   16 bit  s    32 bit  s ou   64 bit  s   code short int  code   deve possuir tamanho de no mínimo 16 bits e não pode ser maior que  code int  code    code long int  code   deve possuir tamanho mínimo de   32 bit  s   code long long int  code   deve possuir tamanho mínimo de   64 bit  stodos estes tipos de inteiros podem ainda ser declarados precedidos da cláusula   unsigned    o que faz com que só suporte números positivos  isto faz com que  com o mesmo tamanho  uma variável suporte mais números positivos do que um   signed    todos os inteiros são signed por omissão    charo tipo    char    ocupa 1   byte    e serve para armazenar   caractere  s ou   número inteiro inteiros    isso significa que o programa reserva um espaço de 8 bits na   memória ram   ou em   registrador registradores   do processador para armazenar um valor     char    de tamanho maior que 8 bits é permitido pela linguagem  mas os casos são raros   com vetores do tipo char é possível criar   cadeia de caracteres cadeias de caracteres    strings    floato tipo de dado    float    serve para armazenar números de   ponto flutuante    ou seja  com casas decimais  o padrão mais utilizado nos últimos 10 anos é o   ieee 754-1985     doubleo tipo de dado    double    serve para armazenar números de ponto flutuante de dupla precisão  normalmente tem o dobro do tamanho do float e portanto o dobro da capacidade  o padrão mais adotado também é o ieee 754-1985   structem c podem ser usadas estruturas  chamados de registos em outras linguagens de programação   as estruturas são grupos de variáveis organizadas arbitráriamente pelo programador  uma estrutura pode criar um novo tipo de variável caso   typedef   seja usado em sua declaração    relações com c     a linguagem de programação   c     foi originalmente derivada do c para suportar programação   orientação a objetos orientada a objetos    à medida que as linguagens c e c   foram evoluindo independentemente  a divisão entre as duas veio a aumentar o padrão c99 criou um número de características que entram em conflito  hoje  as principais diferenças entre as duas linguagens são       code inline  code     - em c    funções em linha encontram-se no espaço global enquanto que em c encontram-se no espaço local  por outras palavras  isso significa que  em c    qualquer definição de qualquer função em linha  sem ser a respeito da sobrecarga de funções de c    tem de estar em conformidade com a  regra de uma definição  da linguagem c    mas em c  a mesma função em linha pode ser definida de maneira diferente em diferentes arquivos  ou ficheiros   a palavra-chave     code bool  code      igual à usada em c    em c99 necessita que se inclua o ficheiro-cabeçalho  code  stdbool h   code    bool está sempre disponível   padrões anteriores de c não definiam um tipo booleano e vários  e incompatíveis  métodos foram usados para simular um tipo booleanoalgumas características originalmente desenvolvidas em c   também apareceram em c  entre elas encontram-se   protótipos de função  com declaração de tipos de parâmetros  e remoção do  int  implícito  comentários de linha  indicados por  code     code   comentários de linha terminam com um carácter de nova-linha  a palavra-chave     code inline  code      tipagem mais forte   exemplos       programa olá mundo    a seguinte aplicação foi publicada na primeira edição de c de k r  e tornou-se no programa de introdução padrão da maior parte dos livros sobre c  o programa envia o texto    programa olá mundo olá  mundo     para a   fluxos padrão saída padrão  stdout  saída padrão    que é normalmente o   console de comandos console    mas que também pode ser um ficheiro  ou arquivo   um outro dispositivo qualquer  ou até mesmo um     bit bucket      dependendo de como a saída-padrão é mapeada na altura em que o programa é executado  syntaxhighlight lang  c  int main void      puts  olá  mundo       syntaxhighlight apesar do programa acima correr corretamente  atualmente origina algumas mensagens de aviso quando compilado como c ansi  essas mensagens podem ser eliminadas efectuando umas pequenas alterações no programa original  syntaxhighlight lang  c    include  stdio h     pacotes com funções de entrada e saída   int main void      puts  olá  mundo        return 0     retorna 0  pois  main  retorna um  int        nova linha após fechar a chave principal     syntaxhighlight a primeira linha do programa é uma   pré-processador diretiva de pré-processamento    code  include  code   que causa com que o pré-processador substitua aquela linha pela totalidade do conteúdo do arquivo qual diretiva se refere  neste caso o arquivo padrão  code stdio h  code   que contém protótipos de funções para trabalho com entrada e saída  irá substituir a linha  os caracteres  code    code  e  code    code  indicam que o arquivo stdio h encontra-se no local em que  quando da configuração do compilador  se definiu como padrão para localização dos ficheiros de inclusão    header files    geralmente com a extensão    h    a linha  não-vazia  seguinte indica que uma função denominada   main   será definida  a função   main   tem um significado especial nos programas em c  pois é a função que é inicialmente executada  em inglês      entry point       os caracteres  code    code  e  code    code  delimitam a extensão da função  o termo  code int  code  define a função   main   como sendo uma função que retorna um número inteiro  o termo  code void  code  indica que a função não aceita parâmetros  a função   main    normalmente aceita parâmetros  que são passado pela   interpretador de comandos linha de comando    os compiladores e sistemas operacionais atuais reconhecem as seguintes declarações de main  syntaxhighlight lang  c  int main void  int main int argc  char  argv    int main int argc  char   argv    syntaxhighlight a linha seguinte  chama   ou executa uma função chamada  code puts  code   o arquivo incluído   code stdio h  code   contém a informação que descreve a forma como a função  code puts  code  deve ser chamada  nesta chamada  é passado à função  code printf  code  um único argumento  a linha de texto constante  olá  mundo    a função  code puts  code  retorna um valor  um  code int  code   mas como não é usado  é descartado pelo compilador  o comando  code return  code  retorna o valor 0 para o sistema  que é interpretado pelo mesmo como que a função main   foi executada e encerrada com sucesso  sem erros   por fim  o caracter  code    code  indica o fim da função  code main  code   note-se que texto rodeado por  code     code  e  code     code   comentários de texto  é ignorado pelo compilador  os compiladores que obedecem à norma c99 também aceitam como comentários as linhas de texto que são precedidos por  code     code      matemática    o seguinte código realiza seis   operação  matemática  operações matemáticas      adição      subtração      multiplicação      divisão      exponenciação   e   radiciação    e em seguida envia os seus respectivos resultados para a saída padrão  normalmente o console   syntaxhighlight lang  c    include  math h      necessária para pow   e sqrt    include  stdio h     necessária para printf   e getchar  int main      int a   2  b   3    printf   d    d    d n   a  b  a   b     printf   d -  d    d n   a  b  a - b     printf   d x  d    d n   a  b  a   b     printf   d    d    0 1f n   a  b   float  a   b      resultado fracionário   printf   d elevado a  d    0 1f n   a  b  pow a  b       pow base  expoente    printf  raiz quadrada de  d    0 1f n   a  sqrt a      getchar      o uso dessa função é necessária apenas nos sistemas windows  para manter o terminal  prompt de comando  aberto   return 0    syntaxhighlight     estruturas de dados    no exemplo seguinte  é criada uma estrutura composta por 3 elementos de tipos diferentes  após ser declarada uma variável  x  do tipo struct  y   onde  y  é o nome da estrutura  para se acessar os elementos usa-se a seguinte sintaxe   code x elemento  code   syntaxhighlight lang  c    include  stdio h struct pessoa    char nome 64      vetor de 64 chars para o nome   unsigned short int idade    char rg 13    int main      struct pessoa exemplo     fulano   16   00 000 000-00       declaração da variável  exemplo    printf  nome   s n   exemplo nome     printf  idade   hu n   exemplo idade     printf  rg   s n   exemplo rg     getchar       desnecessário  mas comumente utilizado em ambientes windows para  segurar  o terminal aberto   return 0    syntaxhighlight ou  equivalente  syntaxhighlight lang  c    include  stdio h typedef struct pessoa    char nome 64      vetor de 64 chars para o nome   unsigned short int idade    char rg 13    pessoa int main      pessoa exemplo     felipe   16   00 000 000-00       declaração da variável  exemplo    printf  nome   s n   exemplo nome     printf  idade   hu n   exemplo idade     printf  rg   s n   exemplo rg     getchar      return 0    syntaxhighlight    baixo-nível   o exemplo que se segue apresenta código c de baixo-nível  as funções read e write  neste programa vamos ler de n para buf  blocos de bufsize neste caso 1024  para o  quando n for igual a 0  é porque a leitura acabou  sai do ciclo while e libera a memória ocupada por buf  syntaxhighlight lang  c    include  unistd h   define bufsize 1024int main void    int n n o   char  buf   buf    char   malloc  bufsize    while n read n  buf  bufsize          write o  buf n    free buf    return 0    syntaxhighlight    ferramentas de programação       dev-c   bloodshed dev-c        ambiente de desenvolvimento integrado ide  ambiente de desenvolvimento integrado     como   code  blocks      netbeans   e   jetbrains clion      gnu compiler collection      automação de compilação    como   make     ver também       c        linguagem compilada      linguagem de programação      linguagem de programação de alto nível      anexo lista de linguagens de programação lista de linguagens de programação      unix      compilador     ligações externas             categoria linguagem de programação c    